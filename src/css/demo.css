/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
/* The provided mixins are intended to be used with the array-like variables .icon-home { @include sprite-width($icon-home); } .icon-email { @include sprite($icon-email); } */
/* The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite. It should be used with a "retina group" variable. The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/ $icon-home-group: ('icon-home', $icon-home, $icon-home-2x, ); .icon-home { @include retina-sprite($icon-home-group); } */
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
body { color: red; }

.bus { background-image: url(../img/sprite/bus.png); background-position: -38px -37px; width: 14px; height: 16px; }

@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { .bus { background-image: url(../img/sprite/bus@2x.png); background-size: 74px 72px; } }

/*# sourceMappingURL=data:application/json;base64, */